
=head1 NAME

=begin original

perlclass - Perl class syntax reference

=end original

perlclass-Perlクラス構文リファレンス
(TBR)

=head1 SYNOPSIS

    use v5.36;
    use feature 'class';

    class My::Example 1.234 {
        field $x;

        ADJUST {
            $x = "Hello, world";
        }

        method print_message {
            say $x;
        }
    }

    My::Example->new->print_message;

=head1 DESCRIPTION

=begin original

This document describes the syntax of the Perl's C<class> feature, which
provides native keywords supporting object-oriented programming paradigm.

=end original

この文書では、オブジェクト指向プログラミングパラダイムをサポートするネイティブキーワードを提供するPerlのC<class>機能の構文について説明します。
(TBR)

=head2 History

=begin original

Since Perl 5, support for objects resolved around the concept of I<blessing>
references with a package name. Such reference could then be used to call
subroutines from the package it was blessed with (or any of its parents). This
system, while bare-bones, was flexible enough to allow creation of multiple
more advanced, community-driven systems for object orientation.

=end original

Perl 5以降、オブジェクトのサポートは、パッケージ名を使用したI<blessing>参照の概念に基づいて解決されました。
このような参照は、そのパッケージ(またはその親のいずれか)からサブルーチンを呼び出すために使用できます。
このシステムは、必要最小限のものではあるが、オブジェクト指向のための複数のより高度なコミュニティ駆動システムの作成を可能にするのに十分な柔軟性を備えていた。
(TBR)

=begin original

Class feature is a core implementation of class syntax which is familiar to
what one would find in other programming languages. It isn't a C<bless>
wrapper, but a completely new system built right into the perl interpreter.

=end original

クラス機能は、他のプログラミング言語で見られるような、クラス構文のコア実装です。
これはC<bless>ラッパーではなく、perlインタプリタに直接組み込まれた全く新しいシステムです。
(TBR)

=head1 KEYWORDS

=begin original

Enabling the C<class> feature allows the usage of the following new keywords in
the scope of current package:

=end original

C<class>機能を有効にすると、現在のパッケージの範囲内で次の新しいキーワードを使用できます。
(TBR)

=head2 class

    class NAME BLOCK

    class NAME VERSION BLOCK

    class NAME;

    class NAME VERSION;

=begin original

The C<class> keyword declares a new package which is intended to be a class.
All other keywords from the C<class> feature should be used in scope of this
declaration.

=end original

C<class>キーワードは、クラスとして意図された新しいパッケージを宣言します。
C<class>機能からの他のすべてのキーワードは、この宣言の範囲内で使用される必要があります。
(TBR)

    class WithVersion 1.000 {
        # class definition goes here
    }

=begin original

Classes can be declared in either block or statement syntax. If a block is
used, the body of the block contains the implementation of the class. If the
statement form is used, the remainder of the file is used up until the next
C<class> or C<package> statement.

=end original

クラスは、ブロック構文またはステートメント構文のいずれかで宣言できます。
ブロックを使用する場合、ブロックの本体にはクラスの実装が含まれます。
ステートメント形式を使用する場合、ファイルの残りの部分は、次のC<class>またはC<package>ステートメントまで使用されます。
(TBR)

=begin original

C<class> and C<package> declarations are similar, but classes automatically get
a constructor named C<new> - You don't have to (and should not) write one.
Additionally, in the class BLOCK you are allowed to declare fields and methods.

=end original

C<class>とC<package>の宣言は似ていますが、クラスは自動的にC<new>という名前のコンストラクタを取得します。
これを作成する必要はありません(作成すべきではありません)。
また、BLOCKクラスでは、フィールドとメソッドを宣言できます。
(TBR)

=head2 field

    field VARIABLE_NAME;

    field VARIABLE_NAME = EXPR;

    field VARIABLE_NAME : ATTRIBUTES;

    field VARIABLE_NAME : ATTRIBUTES = EXPR;

=begin original

Fields are variables which are visible in the scope of the class - more
specifically within L</method> and C<ADJUST> blocks. Each class instance get
their own storage of fields, independent of each other.

=end original

フィールドは、クラスのスコープ内(より具体的にはL</method>およびC<ADJUST>ブロック内)に表示される変数です。
各クラスインスタンスは、互いに独立した独自のフィールドストレージを取得します。
(TBR)

=begin original

A field behaves like a normal lexically scoped variable. It has a sigil and is
private to the class (though creation of an accessor method will make it
accessible from the outside). The main difference is that different instances
access different values in the same scope.

=end original

フィールドは、通常の語彙的にスコープ指定された変数のように動作します。
フィールドには署名があり、クラスに対してプライベートです(ただし、アクセサメソッドを作成すると、外部からアクセスできるようになります)。
主な違いは、異なるインスタンスが同じスコープ内の異なる値にアクセスすることです。
(TBR)

    class WithFields {
        field $scalar = 42;
        field @array  = qw(this is just an array);
        field %hash   = (species => 'Martian', planet => 'Mars');
    }

=begin original

Fields may optionally have initializing expressions. If present, the expression
will be evaluated within the constructor of each object instance. During each
evaluation, the expression can use the value of any previously-set field, as
well as see any other variables in scope.

=end original

フィールドは、オプションで初期化式を持つことができます。
存在する場合、式は各オブジェクトインスタンスのコンストラクタ内で評価されます。
各評価中に、式は以前に設定されたフィールドの値を使用でき、スコープ内の他の変数を参照できます。
(TBR)

    class WithACounter {
        my $next_count = 1;
        field $count = $next_count++;
    }

=begin original

When combined with the C<:param> field attribute, the defaulting expression can
use any of the C<=>, C<//=> or C<||=> operators. Expressions using C<=> will
apply whenever the caller did not pass the corresponding parameter to the
constructor at all. Expressions using C<//=> will also apply if the caller did
pass the parameter but the value was undefined, and expressions using C<||=>
will apply if the value was false.

=end original

C<:param>フィールド属性と組み合わせた場合、デフォルトの式では、C<=>、C<//=>、またはC<||$=>演算子のいずれかを使用できます。
C<=>を使用した式は、呼び出し側がコンストラクタに対応するパラメータをまったく渡さなかった場合に適用されます。
C<//=>を使用した式は、呼び出し側がパラメータを渡したが値が未定義であった場合にも適用され、C<|$%%$%$=>を使用した式は、値がfalseであった場合に適用されます。
(TBR)

=head2 method

    method METHOD_NAME SIGNATURE BLOCK

    method METHOD_NAME BLOCK

    method SIGNATURE BLOCK

    method BLOCK

=begin original

Methods are subroutines intended to be called in the context of class objects.

=end original

メソッドは、クラスオブジェクトのコンテキストで呼び出されることを目的としたサブルーチンです。
(TBR)

=begin original

A variable named C<$self> populated with the current object instance will
automatically be created in the lexical scope of C<method>.

=end original

現在のオブジェクトインスタンスが入力されたC<$self>という名前の変数が、C<method>のレキシカルスコープに自動的に作成されます。
(TBR)

=begin original

Methods always act as if C<use feature 'signatures'> is in effect, but C<$self>
will not appear in the arguments list as far as the signature is concerned.

=end original

メソッドは常にC<use feature 'signatures'>が有効であるかのように動作しますが、C<$self>はシグニチャに関する限り引数リストには表示されません。
(TBR)

    class WithMethods {
        field $greetings;

        ADJUST {
            $greetings = "Hello";
        }

        method greet($name = "someone") {
            say "$greetings, $name";
        }
    }

=begin original

Just like regular subroutines, methods I<can> be anonymous:

=end original

通常のサブルーチンと同じように、メソッドIは匿名にすることができます。
(TBR)

    class AnonMethodFactory {

        method get_anon_method {
            return method {
                return 'this is an anonymous method';
            };
        }
    }

=head1 ATTRIBUTES

=begin original

Specific aspects of the keywords mentioned above are managed using
I<attributes>. Attributes all start with a colon, and one or more of them can
be appended after the item's name, separated by a space.

=end original

上記のキーワードの特定の側面は、I<attributes>を使用して管理されます。
属性はすべてコロンで始まり、1つまたは複数の属性をアイテム名の後にスペースで区切って追加できます。
(TBR)

=head2 Class attributes

=head3 :isa

=begin original

Classes may inherit from B<one> superclass, by using the C<:isa> class
attribute.

=end original

クラスは、C<:isa>クラス属性を使用して、B<one>スーパークラスから継承できます。
(TBR)

    class Example::Base { ... }

    class Example::Subclass :isa(Example::Base) { ... }

=begin original

Inherited methods are visible and may be invoked. Fields are always lexical
and therefore not visible by inheritance.

=end original

継承されたメソッドは表示され、呼び出すことができます。
フィールドは常に字句であるため、継承によって表示されることはありません。
(TBR)

=begin original

The C<:isa> attribute may request a minimum version of the base class; it is
applied similar to C<use> - if the provided version is too low it will fail at
compile time.

=end original

C<:isa>属性は、基本クラスの最小バージョンを要求する場合があります。
これは、C<use>と同様に適用されます。
指定されたバージョンが低すぎる場合、コンパイル時に失敗します。
(TBR)

    class Example::Subclass :isa(Example::Base 2.345) { ... }

=begin original

The C<:isa> attribute will attempt to C<require> the named module if it is not
already loaded.

=end original

C<:isa>属性は、指定されたモジュールがまだロードされていない場合に、そのモジュールを<require>Cしようとします。
(TBR)

=head2 Field attributes

=head3 :param

=begin original

A scalar field with a C<:param> attribute will take its value from a named
parameter passed to the constructor. By default the parameter will have the
same name as the field (minus its leading C<$> sigil), but a different name
can be specified in the attribute.

=end original

C<:param>属性を持つスカラーフィールドは、コンストラクタに渡された名前付きパラメータから値を取得します。
デフォルトでは、パラメータはフィールドと同じ名前(先頭のC<$>シギルを除く)を持ちますが、属性には別の名前を指定できます。
(TBR)

    field $x :param;
    field $y :param(the_y_value);

=begin original

If there is no defaulting expression then the parameter is required by the
constructor; the caller must pass it or an exception is thrown. With a
defaulting expression this becomes optional.

=end original

デフォルトの式がない場合、コンストラクタにはパラメータが必要です。
コール元はパラメータを渡す必要があり、渡さない場合は例外がスローされます。
デフォルトの式を使用すると、これはオプションになります。
(TBR)

=head2 Method attributes

=begin original

None yet.

=end original

まだありません。
(TBR)

=head1 OBJECT LIFECYCLE

=head2 Construction

=begin original

Each object begins its life with a constructor call. The constructor is always
named C<new> and is invoked like a method call on the class name:

=end original

各オブジェクトは、コンストラクタ呼び出しから始まります。
コンストラクタは常にC<new>という名前で、クラス名に対するメソッド呼び出しのように呼び出されます。
(TBR)

    my $object = My::Class->new(%arguments);

=begin original

During the construction, class fields are compared to C<%arguments> hash and
populated where possible.

=end original

構築中に、クラスフィールドはC<%arguments>ハッシュと比較され、可能な場合は値が入力されます。
(TBR)

=head2 Adjustment

=begin original

Object adjustment can be performed during the construction to run user-defined
code. It is done with the help of C<ADJUST> blocks, which are called in order
of declaration.

=end original

オブジェクトの調整は、ユーザ定義コードを実行するための構築中に実行できます。
これは、宣言の順序で呼び出されるC<ADJUST>ブロックの助けを借りて行われます。
(TBR)

=begin original

They are similar to C<BEGIN> blocks, which run during the compilation of a
package. However, they also have access to C<$self> lexical (object instance)
and all object fields created up to that point.

=end original

これらは、パッケージのコンパイル中に実行されるC<BEGIN>ブロックに似ていますが、C<$self>の字句(オブジェクトインスタンス)およびその時点までに作成されたすべてのオブジェクトフィールドにもアクセスできます。
(TBR)

=head2 Lifetime

=begin original

After the construction phase, object is ready to be used.

=end original

構築フェーズの後、オブジェクトは使用可能な状態になります。
(TBR)

=begin original

Using C<blessed> (C<Scalar::Util::blessed> or C<builtin::blessed>) on the
object will return the name of the class, while C<reftype>
(C<Scalar::Util::reftype> or C<builtin::reftype>) will return the string
C<'OBJECT'>.

=end original

オブジェクトに対してC<blessed>(C<Scalar::Util::blessed>またはC<builtin::blessed>)を使用すると、クラスの名前が返されます。
一方、C<reftype>(C<Scalar::Util::reftype>またはC<builtin::reftype>)を使用すると、文字列C<'OBJECT'>が返されます。
(TBR)

=head2 Destruction

=begin original

Just like with other references, when object reference count reaches zero it
will automatically be destroyed.

=end original

他の参照と同様に、オブジェクト参照カウントがゼロになると、自動的に破棄されます。
(TBR)

=head1 TODO

=begin original

This feature is still experimental and very incomplete. The following list
gives some overview of the kinds of work still to be added or changed:

=end original

この機能はまだ実験的であり、非常に不完全です。
次のリストは、追加または変更される作業の種類の概要を示しています。
(TBR)

=over 4

=item * Roles

=begin original

Some syntax for declaring a role (likely a C<role> keyword), and for consuming
a role into a class (likely a C<:does()> attribute).

=end original

役割を宣言するための構文(Cの<role>キーワードなど)と、役割をクラスに取り込むための構文(Cの<:does()>属性など)。
(TBR)

=item * Parameters to ADJUST blocks

=begin original

Some syntax for declaring that an C<ADJUST> block can consume named
parameters, which become part of the class constructor's API. This might be
inspired by a similar plan to add named arguments to subroutine signatures.

=end original

C<ADJUST>ブロックがクラスコンストラクタのAPIの一部となる名前付きパラメータを消費できることを宣言するためのいくつかの構文。
これは、名前付き引数をサブルーチンシグネチャに追加する同様の計画に触発された可能性がある。
(TBR)

    class X {
        ADJUST (:$alpha, :$beta = 123) {
           ...
        }
    }

    my $obj = X->new(alpha => 456);

=item * ADJUST blocks as true blocks

=begin original

Currently, every ADJUST block is wrapped in its own CV that gets invoked with
the full ENTERSUB overhead. It should be possible to use the same mechanism
that makes all field initializer expressions appear within the same CV on
ADJUST blocks as well, merging them all into a single CV per class. This will
make it faster to invoke if a class has more than one of them.

=end original

現在、すべてのADJUSTブロックは、完全なENTERSUBオーバーヘッドで呼び出される独自のCVにラップされています。
すべてのフィールド初期化式をADJUSTブロックの同じCV内に表示する同じメカニズムを使用して、クラスごとにすべてを単一のCVにマージすることも可能です。
これにより、クラスに複数のCVがある場合の呼び出しが高速になります。
(TBR)

=item * Accessor generator attributes

=begin original

Attributes to request that accessor methods be generated for fields. Likely
C<:reader> and C<:writer>.

=end original

フィールドに対してアクセサメソッドの生成を要求する属性。
C<:reader>およびC<:writer>が考えられます。
(TBR)

    class X {
        field $name :reader;
    }

=begin original

Equivalent to

=end original

と同等
(TBR)

    class X {
        field $name;
        method name { return $name; }
    }

=item * Metaprogramming

=begin original

An extension of the metaprogramming API (currently proposed by
L<RFC0022|https://github.com/Perl/RFCs/pull/25>) which adds knowledge of
classes, methods, fields, ADJUST blocks, and other such class-related details.

=end original

(現在L<RFC0022|https://github.com/Perl/RFCs/pull/25>によって提案されている)メタプログラミングAPIの拡張で、クラス、メソッド、フィールド、ADJUSTブロック、およびその他のクラス関連の詳細に関する知識を追加します。
(TBR)

=item * Extension Customisation

=begin original

Ways in which out-of-core modules can interact with the class system,
including an ability for them to provide new class or field attributes.

=end original

コア外モジュールがクラスシステムと相互作用する方法。
これには、新しいクラスまたはフィールド属性を提供する機能が含まれます。
(TBR)

=back

=head1 AUTHORS

=begin original

Paul Evans

=end original

ポールエバンス
(TBR)

=begin original

Bartosz Jarzyna

=end original

バルトシュJarzyna
(TBR)


=cut

